import Mathlib.CategoryTheory.Over
import Mathlib.CategoryTheory.EqToHom
import LeanCourse.Project.FiberedCategories
set_option linter.unusedVariables false
open Lean Meta Elab Parser Tactic PrettyPrinter
set_option autoImplicit true

namespace CategoryTheory

--open Opposite
set_option maxHeartbeats 200000
set_option quotPrecheck false
universe v‚ÇÅ u‚ÇÅ --v‚ÇÇ u‚ÇÅ u‚ÇÇ
-- morphism levels before object levels. See note [CategoryTheory universes].



namespace FiberedCategories

variable {B : Cat.{v‚ÇÅ , u‚ÇÅ}} {I J K : B}
-- scoped infixr:80 " >> " => fun F G => transLift G F

scoped infixr:80 " ‚Üì " => fun P A =>obj_over (P:=P.1.hom) A
notation (priority := high) P "[" A "]" => obj_over (P:=P.1.hom) A

class Cleavage (P : fibration B)  : Type (max u‚ÇÅ v‚ÇÅ) where
  Cart' : ‚àÄ {J I : B} (u : J ‚ü∂ I ) (X: P[I] ) , cartesianLiftOfAlong (P:=P.1.hom) X u

open Cleavage

scoped notation u " * " X => (Cart' u X).Y
variable  {P : fibration B} [Cleavage P]
-- scoped notation "Cart" u X => (Cart' u X).œÜ.1 would prefer that TODO
def Cart {J I : B} (u : J ‚ü∂ I) (X : P[I]) : (u * X).1 ‚ü∂ X.1 := (Cart' u X).œÜ.1
def transport   {A A' : B} {u u' : A ‚ü∂ A'} {X : P[A]} {X' : P[A']}
  (p : u = u') (f : over_hom u X X') : over_hom u' X X' := by
  use f.1
  rw [‚Üê whisker_eq (CategoryTheory.eqToHom X.2) p]
  exact f.2
def transportLift {J I : B} {X : P[I]} {u u' : J ‚ü∂ I}(p : u = u')
  (L : liftOfAlong X u) : liftOfAlong (P:=P.1.hom) X u' := by
  obtain ‚ü®  Y , œÜ ‚ü© := L
  exact ‚ü® Y , transport p œÜ‚ü©

def map' {P : fibration B} [Cleavage P] {J I : B} {X Y : P[I]}  (u : J ‚ü∂ I) (Œ± : X ‚ü∂ Y ) :
  ‚àÉ! œÜ : (u*X) ‚ü∂ u * Y , œÜ.1 ‚â´ Cart u Y = Cart u X ‚â´ Œ±.1 := by
    let sth : isCartesian (Cart' u Y).1 := (Cart' u Y).isCart
    let lift : liftOfAlong Y (u ‚â´ ùüô I) := transLift ‚ü® _ , coercBack Œ±‚ü©  (Cart' u X).1
    let lift' : liftOfAlong Y (u ) := transportLift (by rw [Category.comp_id ]) lift
    exact (weakCartifCartesian (Cart' u Y) lift')


    -- exact uniq
notation u " ‚ãÜ " f => map' u f
--notation (priority := high) u " ‚ãÜ " f => map' u f

lemma map_comp'  (u : J ‚ü∂ I) {X Y Z : P[I]}
(Œ± : X ‚ü∂Y) (Œ≤ : Y ‚ü∂Z ) : (u ‚ãÜ Œ±).choose ‚â´(u ‚ãÜ Œ≤).choose = (u ‚ãÜ (Œ±‚â´Œ≤) ).choose := by
    let hcomp := (u ‚ãÜ (Œ± ‚â´Œ≤  )).choose_spec
    let hœÜ :=  ((u ‚ãÜ Œ±).choose_spec).1
    let hœà :=  ((u ‚ãÜ Œ≤).choose_spec).1
    apply hcomp.2
    have hœÜ : ((u ‚ãÜ Œ±).choose).1 ‚â´ Cart u Y =  Cart u X ‚â´ Œ±.1 := hœÜ
    have hœà : ((u ‚ãÜ Œ≤).choose).1 ‚â´ Cart u Z =  Cart u Y ‚â´ Œ≤.1 := hœà
    have ass : Cart u X ‚â´ (Œ± ‚â´ Œ≤).1 = (Cart u X ‚â´ Œ±.1) ‚â´ Œ≤.1 := by
      rw [Category.assoc] ;
      simp
    rw [ass]
    have hts : ((u ‚ãÜ Œ±).choose.1 ‚â´(u ‚ãÜ Œ≤).choose.1) ‚â´ Cart u Z
      = (Cart u X ‚â´ Œ±.1) ‚â´ Œ≤.1 := by rw [Category.assoc , hœà , ‚Üê Category.assoc , hœÜ] ;
    exact hts
lemma map_id' {P : fibration B} [Cleavage P] (u : J ‚ü∂ I) {X : P[I]} :
  ùüô _ = (u ‚ãÜ (ùüô X)).choose := by
    apply ((u ‚ãÜ (ùüô X) ).choose_spec).2
    aesop_cat


noncomputable def reindexing  {P : fibration B} [Cleavage P] (u : J ‚ü∂ I) : P[I] ‚•§ P[J] where
  obj := fun X ‚Ü¶ u * X
  map := fun {X}{Y} Œ± ‚Ü¶ (u ‚ãÜ Œ±).choose
  map_comp := fun {X} {Y} {Z} Œ± Œ≤ ‚Ü¶ by symm ; exact (map_comp' u Œ± Œ≤)
  map_id := fun X ‚Ü¶ by symm ; exact map_id' (P:=P) u
def split {P : fibration B} (c : Cleavage P) : Prop :=
  ‚àÄ {I} (X : P[I]) , isIdentity (Y:=X.1) (Cart (ùüô I) X)  ‚àß
  ‚àÄ {I J K} (u : J ‚ü∂ I) (v : K ‚ü∂ J) (X : P[I]) , ‚àÉ p : (v * u * X).1 = ((v ‚â´ u) * X).1 ,
    eqToHom p ‚â´ Cart (v ‚â´ u) X = Cart v (u * X) ‚â´ Cart u X
structure splitFibration (B : Cat) where
 P : fibration B
 c : Cleavage P
 isSplit : split c
instance : CoeOut (splitFibration B) (fibration B) := ‚ü® fun Œ± ‚Ü¶ Œ±.1‚ü©
instance (P : splitFibration B) : Cleavage P.1 where
  Cart' := P.c.Cart'

def splitCartesianFunctor (P Q : splitFibration B) := {F : P ‚•§c Q.1 //
  ‚àÄ {I} {J} (u : J ‚ü∂ I) (X : P.1 ‚Üì I) ,
    ‚àÉ (p : (u * ((F / I).obj X)).1 = (F / J).obj (u * X) ) ,
    eqToHom p ‚â´ (F.1.left).map (Cart u X) = Cart u ((F / I).obj X) }
scoped notation P "‚•§cs" Q => splitCartesianFunctor P Q
-- scoped infixr:80 " >> " => fun F G => transLift G F

def compOfSplitFuncs {P Q R : splitFibration B} (F : P ‚•§cs Q) (G: Q ‚•§cs R) :
  P ‚•§cs R := ‚ü® F.1 ‚â´ G.1 , fun {I} {J} u X ‚Ü¶ by
  let FX := (F.1 / I).obj X
  have p' : (u * ((G.1 / I).obj FX)).1 = (G.1 / J).obj (u * FX) :=    (G.2 u ((F.1 / I).obj X)).choose
  --
  have q :  (u * ((F.1 / I).obj X)).1 = ((F.1 / J).obj (u * X)) :=  (F.2 u X).choose
  have p : (u * ((F.1‚â´G.1 / I ).obj X)).1  = ((F.1‚â´G.1 / J ).obj (u * X)).1 := by
    calc (u * ((F.1‚â´G.1 / I ).obj X)).1
      = (u * ((G.1 / I).obj FX)).1 := rfl
    _ = (G.1 / J).obj (u * ((F.1 / I).obj X)) := p'
    _ = ((G.1 / J).obj ((F.1 / J).obj (u * X))).1 := by rw [q]
    _ = ((F.1‚â´G.1 / J ).obj (u * X)).1 := rfl
    -- exact (F.2 u X).choose

  use p

  sorry ‚ü©


/-

instance : Category (splitFibration B) where
  Hom := splitCartesianFunctor
  id := fun P ‚Ü¶ ‚ü® (ùüô P.1) , fun u X ‚Ü¶ by use rfl ; simp ; aesop ‚ü©
  comp := compOfSplitFuncs
-/
