import Mathlib.CategoryTheory.Over
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Grothendieck
-- import Mathlib.CategoryTheory.Bundled
import LeanCourse.Project.FiberedCategories
import LeanCourse.Project.CartesianComposition
import LeanCourse.Project.Cleavage
import LeanCourse.Project.Split
--import LeanCourse.Project.PreSheavesOfCategories
import LeanCourse.Project.DiscreteFibration


set_option linter.unusedVariables false
open Lean Meta Elab Parser Tactic PrettyPrinter
set_option autoImplicit true

namespace CategoryTheory

--open Opposite
set_option maxHeartbeats 1500000
set_option quotPrecheck false

universe v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ   --v‚ÇÇ u‚ÇÅ u‚ÇÇ
-- morphism levels before object levels. See note [CategoryTheory universes].



namespace FiberedCategories
-- notation (priority := high) P "[" A "]" => obj_over (P:=P.1.hom) A
variable {B : Cat.{v‚ÇÅ , v‚ÇÅ}} {I J K : B}
-- def tot' (P : PShCat B) : Type _ := ()
@[simps] def opFunctor : Cat.{v‚ÇÅ,u‚ÇÅ} ‚•§ Cat.{v‚ÇÅ,u‚ÇÅ} where
  obj := fun X ‚Ü¶ Bundled.of (X ·µí·µñ)
  map := fun F ‚Ü¶ Functor.op F


def tot (P : PShCat.{v‚ÇÅ , v‚ÇÅ , v‚ÇÅ , v‚ÇÅ } B) : Cat.{v‚ÇÅ,v‚ÇÅ} := Bundled.of (CategoryTheory.Grothendieck (P ‚ãô opFunctor)) -- , Grothendieck.instCategoryGrothendieck‚ü©
def totop (P : PShCat.{v‚ÇÅ , v‚ÇÅ , v‚ÇÅ , v‚ÇÅ }  B) : Cat.{_,_} := Bundled.of ((tot P)·µí·µñ)
--Bundled.of (tot' P) Grothendieck.instCategoryGrothendieck
-- def coercCat (B : Cat.{v‚ÇÅ , u‚ÇÅ }) : Cat.{max v‚ÇÅ v‚ÇÇ , max u‚ÇÅ u‚ÇÇ} := by sorry
-- def coercType (B : Type u‚ÇÅ ) : Type (max u‚ÇÅ v‚ÇÅ) := B
variable {B : Cat.{v‚ÇÅ,v‚ÇÅ}}
def Grth' (P : PShCat.{v‚ÇÅ , v‚ÇÅ , v‚ÇÅ , v‚ÇÅ } B) :  totop P ‚ü∂ B := Functor.leftOp (CategoryTheory.Grothendieck.forget (P ‚ãô opFunctor))
 -- (coercCat.{_,_,u‚ÇÅ,v‚ÇÅ} B)

def Grth (P : PShCat.{v‚ÇÅ , v‚ÇÅ , v‚ÇÅ , v‚ÇÅ } B) : Over (B) := Over.mk (Grth' P)

/-
theorem compInFiber' {P : PShCat.{v‚ÇÅ , v‚ÇÅ , v‚ÇÅ , v‚ÇÅ } B} {X Y Z  : tot P} (f : Z ‚ü∂Y) (g : Y ‚ü∂ X) :
(f ‚â´g ).fiber = eqToHom ((by sorry) : ((P ‚ãô opFunctor).map (f.base ‚â´g.base)).obj Z.fiber =  ((P ‚ãô opFunctor).map g.base).obj (((P ‚ãô opFunctor).map f.base).obj Z.fiber))
 ‚â´  (((P ‚ãô opFunctor).map (g.base)).map (f.fiber)) ‚â´ g.fiber := by apply CategoryTheory.Grothendieck.comp_fiber
  -- (g ‚â´f).unop.fiber.unop = (g.unop.fiber.unop) ‚â´ ((P.map (g.unop.base.unop)).map (f.unop.fiber)).unop ‚â´ eqToHom (by sorry):= by
-/
variable {P : PShCat.{v‚ÇÅ , v‚ÇÅ , v‚ÇÅ , v‚ÇÅ } B}
notation "fiber" => obj_over (P:=(Grth P).hom)
theorem compInFiber'  {X Y Z  : totop P} (f : Y ‚ü∂Z) (g : X ‚ü∂ Y) :
(f.unop ‚â´ g.unop ).fiber = eqToHom (by sorry : Opposite.op ((P.map (f.unop.base ‚â´g.unop.base)).obj Z.unop.fiber.unop) =  Opposite.op ((P.map g.unop.base).obj ((P.map f.unop.base).obj Z.unop.fiber.unop)))
 ‚â´  (Opposite.op ((P.map (g.unop.base)).map (f.unop.fiber.unop))) ‚â´ g.unop.fiber := by
  apply CategoryTheory.Grothendieck.comp_fiber
def compInFiberCrypticPath  {X Y Z  : totop P} {f : Y ‚ü∂Z} {g : X ‚ü∂ Y} : ((P.map g.unop.base).obj ((P.map f.unop.base).obj Z.unop.fiber.unop))= ((P.map (f.unop.base ‚â´g.unop.base)).obj Z.unop.fiber.unop) := by
  erw [Functor.map_comp, Functor.comp_obj]
theorem compInFiber {X Y Z  : totop P} (f : Y ‚ü∂Z) (g : X ‚ü∂ Y) :
(g ‚â´ f ).unop.fiber.unop = g.unop.fiber.unop
 ‚â´  (((P.map (g.unop.base)).map (f.unop.fiber.unop))) ‚â´
  eqToHom (compInFiberCrypticPath) := by
  have this : (g ‚â´ f ).unop.fiber.unop = (f.unop ‚â´ g.unop).fiber.unop := by aesop
  rw [this , congrArg (fun x ‚Ü¶ x.unop) (compInFiber' f g)]
  aesop
def fiberToSection {I : ‚Üë B} (X : fiber I) :
 P.obj (Opposite.op I) := (P.map (eqToHom (congrArg Opposite.op X.2))).obj  X.1.unop.fiber.unop

def sectionToFiber   {I : ‚Üë B} (X : P.obj (Opposite.op I)) : fiber I := by
  use ‚ü®Opposite.op I , Opposite.op X‚ü©
  rfl
lemma Grthmap {X Y : (Grth P).left} {u' : Y ‚ü∂X} : (Grth P).hom.map u' = u'.unop.base.unop := rfl
lemma extOverHom {J I : B} {u : J ‚ü∂I } {X : fiber I} {Y : fiber J} (œà' œà: over_hom u Y X) : œà'.1.unop.base = œà.1.unop.base := by
  have t1 := œà'.2
  have t2 := œà.2
  let g := eqToHom X.2
  apply Quiver.Hom.unop_inj
  apply ((IsIso.of_iso (eqToIso X.2)).mono_of_iso).right_cancellation


  rw [Grthmap ] at t1
  rw [Grthmap] at t2
  rw [eqToIso.hom ]
  rw [t1,t2]


def cleavage{J I : ‚ÜëB}
  (u : J ‚ü∂ I)
  (X : fiber I) : cartesianLiftOfAlong (P:=(Grth P).hom) X u := by
  let Y:= sectionToFiber <| (P.map u.op).obj (fiberToSection X)
/-
  let myœÜIso : (Y.1).unop.fiber.unop  ‚âÖ (((P ‚ãô opFunctor).map
        (eqToHom (_ : Opposite.op (X.1).unop.1.unop = Opposite.op I) ‚â´
          u.op ‚â´ eqToHom (_ : Opposite.op J = (Y.1).unop.base))).obj
    (X.1).unop.fiber).unop
    -/
  let myœÜIso : (((P ‚ãô opFunctor).map
        (eqToHom (_ : Opposite.op (X.1).unop.1.unop = Opposite.op I) ‚â´
          u.op ‚â´ eqToHom (_ : Opposite.op J = (Y.1).unop.base))).obj
    (X.1).unop.fiber) ‚âÖ (Y.1).unop.fiber
  := by
      apply eqToIso
      aesop
  let myœÜ : liftOfAlong X u := by
    use Y
    let u' : Y.1 ‚ü∂ X.1 := by
      use eqToHom (congrArg Opposite.op X.2) ‚â´  u.op ‚â´  (eqToHom <| symm (congrArg Opposite.op Y.2))
      use myœÜIso.hom.unop
    use u'
    have this : u'.unop.base = eqToHom (congrArg Opposite.op X.2) ‚â´  u.op ‚â´  (eqToHom <| symm (congrArg Opposite.op Y.2)) := rfl
    have this : u'.unop.base.unop =  (eqToHom <| (Y.2)) ‚â´ u ‚â´  eqToHom (symm X.2):= by rw [congrArg (fun x ‚Ü¶ x.unop) this] ; simp ; apply (_ ‚â´= ¬∑  ); sorry

    rw [Grthmap , this, Category.assoc]
    apply (_ ‚â´= ¬∑ )
    rw [Category.assoc]
    rw [eqToHom_trans, eqToHom_refl]
    exact Category.comp_id u
  use myœÜ
  intro K v L
  obtain ‚ü®  Z  , ‚ü® œÜ ‚ü© , hœÜ  ‚ü©  := L
  let P' := P ‚ãô opFunctor
  have targetEq : ((P'.map œÜ.base).obj (X.1).unop.fiber) = (P'.map (v.op ‚â´ Opposite.op (eqToHom Z.2))).obj (Y.1).unop.fiber := by sorry
  -- obtain ‚ü® ‚ü®K' , Z ‚ü© ‚ü©  := Z.1

  let Œõ :  (Z.1).unop.fiber.unop ‚ü∂ ((P'.map œÜ.base).obj (X.1).unop.fiber).unop := œÜ.fiber.unop
  let Œõ : Z.1 ‚ü∂ Y.1 := ‚ü® _ ,  (eqToHom (symm targetEq)) ‚â´ Opposite.op Œõ‚ü©
  let œà : over_hom v Z Y := by use Œõ ; sorry
  use œà
  have goal : (œà.1 ‚â´ myœÜ.œÜ.1).unop= œÜ  := by simp ; sorry
  have goal : œà.1 ‚â´ myœÜ.œÜ.1 = ‚ü® œÜ ‚ü©  := congrArg Opposite.op goal
  constructor
  exact goal
  intro œà' hœà'
  apply Subtype.ext
  -- have l : myœÜIso.hom = myœÜ.œÜ.1.unop.fiber.unop := rfl
  let thisFunctor : P'.obj (Y.1.unop.base) ‚ü∂ P'.obj (Z.1.unop.base)  :=(P'.map (œà.1).unop.base)
  let mœÜ : _ ‚ü∂ Y.1.unop.fiber := myœÜ.œÜ.1.unop.fiber
  have g : Epi (thisFunctor.map mœÜ) := (IsIso.of_iso (thisFunctor.mapIso myœÜIso)).epi_of_iso
  apply Quiver.Hom.unop_inj
  exact Grothendieck.ext _ _ (extOverHom œà' œà) (by
      -- ((IsIso.of_iso myœÜIso).mono_of_iso).right_cancellation
      apply g.left_cancellation

      --have hœà' : myœÜ.1.œÜ.unop.fiber ‚â´ œà'
      sorry
      --have goal : thisFunctor.map mœÜ ‚â´ œà.1.unop.fiber = œÜ.fiber := by sorry

      --rw   [‚Üê Category.assoc , hœà' , goal]
      )


def Grothendieck_obj (P : PShCat B) : splitFibration B where
  P:= ‚ü®Grth P , fun u X ‚Ü¶ by
    let cl := cleavage u X
    exact ‚ü®cl.1 , cl.2‚ü©
    ‚ü©
  c := ‚ü®cleavage  ‚ü©
  isSplit := by sorry


def Grothendieck : PShCat B ‚•§ splitFibration B where
  obj := fun P => Grothendieck_obj P
  map := by sorry
  map_comp := by sorry
  map_id := by sorry
def fiberComparisonFunctorObj {P : PShCat B} {I : B·µí·µñ } (X : P.obj I) : (Grothendieck_obj P) ‚Üì I.unop :=  ‚ü® ‚ü® I , Opposite.op X‚ü©  , rfl‚ü©
def fiberComparisonFunctor_map_fib {P : PShCat B} {I : B·µí·µñ }  {X Y : P.obj I} (f : X ‚ü∂ Y) :
  (fiberComparisonFunctorObj X).1.unop.fiber.unop ‚ü∂ (((P ‚ãô opFunctor).map (ùüô I)).obj (fiberComparisonFunctorObj Y).1.unop.fiber).unop := f ‚â´ eqToHom (by rw [Functor.map_id] ; rfl)
@[simps] def fiberComparisonFunctor (P : PShCat B) (I : B·µí·µñ ) : P.obj I ‚•§ (Grothendieck_obj P) ‚Üì I.unop where --‚âå
  obj := fun X ‚Ü¶ fiberComparisonFunctorObj X
  map := fun f ‚Ü¶ by exact ‚ü® ‚ü® ùüô I , Opposite.op (fiberComparisonFunctor_map_fib f)‚ü©  , by aesop ‚ü©
  map_id := by sorry
  map_comp := by sorry
theorem fiberComparisonIsEquivalence {P : PShCat B} {I : B·µí·µñ } : IsEquivalence (fiberComparisonFunctor P I) := by sorry

lemma cartMorphsAreIsosOnFiber {P : PShCat B} {X Y : totop P} {f : X ‚ü∂ Y} (isCart : isCartesianMorphism (Grth P) f) : IsIso f.unop.fiber.unop  := by sorry

  /-
   toFun :=
  invFun:= fun X ‚Ü¶ (P.map (eqToHom (congrArg (fun x ‚Ü¶ Opposite.op x) X.2))).obj X.1.unop.fiber.unop
  left_inv := by intro X ; simp ; aesop
  right_inv := by
    intro X
    apply Subtype.ext
    simp
    obtain ‚ü® I , X‚ü© := X.1

    --aesop

    /-
    match _ , X with
      base
      -/
      -- apply Grothendieck.ext
  -/
