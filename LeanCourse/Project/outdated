OLD FUNCTIONS, NOT IMPORTANT
/-
lemma strongDiscreteness {A : B} (u : J ‚ü∂ I ) (X : obj_over I)
  (L : liftOfAlong (P:=(domainOver A).hom) X u) :  ‚àÉ (p :  L.Y.1 = (domainLift u X).Y.1) , L.œÜ.1 = eqToHom p ‚â´ (domainLift u X).œÜ.1  := by
  obtain ‚ü® Y , œÜ ‚ü© := L
  obtain ‚ü®œÜ , hœÜ‚ü© := œÜ
  let p : Y.1 = (domainLift u X).Y.1 := by
    apply Subtype.ext
  use p
  have lol : œÜ.left = u
  have this : Y.1.hom = œÜ.left ‚â´ X.1.hom := by aesop
  simp
  apply Over.OverMorphism.ext
-/



/-
@[ext] def extCartLift {J I} (u : J ‚ü∂ I) (X : obj_over (P:=P) I) (r s : cartesianLiftOfAlong X u) (q : r.1 = s.1) : r = s
  := by sorry
-/


/-
def compPath {X Y : fundamentalFibration.obj I ‚ü∂ P} {u: ((fundamentalFibration.obj I).1).left.1}:
  P.1.hom.obj ((X.1).left.obj u) ‚ü∂ P.1.hom.obj ((Y.1).left.obj u) := eqToHom (by  rw [‚Üê comm X, comm Y]  )

noncomputable def equivOnFibersFullCartSrc {X Y : fundamentalFibration.obj I ‚ü∂ P}
  (f: E'_obj.obj X ‚ü∂ E'_obj.obj Y)
  (u: ((fundamentalFibration.obj I).1).left.1)
  :  cartesianLiftOfAlong (E_obj_obj X)
    (compPath ‚â´
    (eqToHom ((by rw [‚Üê comm Y] ; rfl) ) ‚â´

    u.hom) : P.1.hom.obj ((X.1).left.obj u) ‚ü∂ I) := by
      let morph : u ‚ü∂ Over.mk (ùüô _) := Over.homMk u.hom
      exact cartesianMorphismToCartLift'' (by rw [‚Üê Category.assoc , rwFuncComp X morph ] ; unfold compPath ; rw [eqToHom_trans] ; rfl) (X.2 morph (automaticallyCart morph))
noncomputable def equivOnFibersFullCartTrg {X Y : fundamentalFibration.obj I ‚ü∂ P}
  (f: E'_obj.obj X ‚ü∂ E'_obj.obj Y)
  (u: ((fundamentalFibration.obj I).1).left.1)
  :  cartesianLiftOfAlong (E_obj_obj Y)
    ((eqToHom ((by rw [‚Üê comm Y] ; rfl) ) ‚â´ u.hom) : P.1.hom.obj ((Y.1).left.obj u) ‚ü∂ I) := by
      let morph : u ‚ü∂ Over.mk (ùüô _) := Over.homMk u.hom
      exact cartesianMorphismToCartLift'' (by rw [rwFuncComp Y] ; rfl) (Y.2 morph (automaticallyCart morph))
      -/
