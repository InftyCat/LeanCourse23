import Mathlib.CategoryTheory.Over
import Mathlib.CategoryTheory.StructuredArrow
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.Bicategory.Basic
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Equivalence

import LeanCourse.Project.FiberedCategories
-- import LeanCourse.Project.Cleavage
-- import LeanCourse.Project.Split
--import LeanCourse.Project.PreSheavesOfCategories
-- import LeanCourse.Project.DiscreteFibration
import LeanCourse.Project.SplitFibrationViaGrothendieck
import LeanCourse.Project.FibrationBicategory
import LeanCourse.Project.CounitOnFibers
import LeanCourse.Project.EquivalenceOfFibrations
import LeanCourse.Project.EquivalenceOnFibers

set_option linter.unusedVariables false
open Lean Meta Elab Parser Tactic PrettyPrinter
set_option autoImplicit true

namespace CategoryTheory

--open Opposite
set_option maxHeartbeats 2000000
set_option quotPrecheck false

universe v‚ÇÅ u‚ÇÅ --v‚ÇÇ u‚ÇÅ u‚ÇÇ
-- morphism levels before object levels. See note [CategoryTheory universes].



namespace FiberedCategories
variable {B : Cat.{v‚ÇÅ , v‚ÇÅ}} {I J K : B}
variable {P : fibration B}


open Over
lemma someOverExt {I J : B·µí·µñ} {u : I ‚ü∂ J} : (Over.map u.unop).obj (Over.mk (ùüô J.unop)) = Over.mk u.unop := by
  trans Over.mk (ùüô J.unop ‚â´ u.unop)
  ¬∑ rfl
  ¬∑ apply congrArg _ ; apply Category.id_comp
def replaceTargetOfFiberMap {X Y : (Sp.obj P).1.1.left} (f : Y ‚ü∂ X) :
  ((((yoObj P).map (fundamentalFibration.map (f.unop.1.unop)).op).obj X.unop.fiber.unop).1).left.obj (Over.mk (ùüô Y.unop.1.unop)) =
      X.unop.2.unop.1.left.obj (Over.mk f.unop.1.unop) := by
      obtain ‚ü®‚ü® I‚ü©  , ‚ü® X ‚ü© ‚ü©:= X
      obtain ‚ü®‚ü® J ‚ü©  , ‚ü® Y ‚ü© ‚ü© := Y
      obtain ‚ü®‚ü® u ‚ü©  , ‚ü® Œ± ‚ü©  ‚ü© :=f
      simp ; apply congrArg (X.1.left.obj) ; exact someOverExt
def replaceTargetOfFiberMap' {X Y : (Sp.obj P).1.1.left} (f : Y ‚ü∂ X) :
  ((((yoObj P).map (fundamentalFibration.map (f.unop.1.unop)).op).obj X.unop.fiber.unop).1).left.obj (Over.mk (ùüô Y.unop.1.unop)) ‚ü∂
      X.unop.2.unop.1.left.obj (Over.mk f.unop.1.unop) :=  eqToHom (replaceTargetOfFiberMap f)

@[simp] def fiberMap {X Y : (Sp.obj P).1.1.left} (f : Y ‚ü∂ X) :
  Y.unop.2.unop.1.left.obj (Over.mk (ùüô _)) ‚ü∂ X.unop.2.unop.1.left.obj (Over.mk f.unop.1.unop)
  := f.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' f
lemma fiberMapVertical  {X Y : (Sp.obj P).1.1.left} (f : Y ‚ü∂ X) : P.1.hom.map (fiberMap f) = eqToHom (by rw [‚Üê comm Y.unop.fiber.unop , ‚Üê comm X.unop.fiber.unop] ; rfl) := by
  unfold fiberMap
  rw [Functor.map_comp]
  unfold replaceTargetOfFiberMap'
  rw [eqToHom_map]
  rw [VerticalAsPath (P:=P) <| (f.unop.fiber.unop.2) ‚ü® mk (ùüô Y.unop.base.unop) , rfl‚ü© ,eqToHom_trans]



@[simp] def E_functor_map {X Y : (Sp.obj P).1.1.left} (f : Y ‚ü∂ X) : ((E'_obj).obj Y.unop.fiber.unop).1 ‚ü∂((E'_obj).obj X.unop.fiber.unop).1  :=
  fiberMap f ‚â´ X.unop.2.unop.1.left.map (Over.homMk f.unop.1.unop)




lemma compCartTransExt {P Q : fibration B} {F G H:  P ‚ü∂ Q} (Œ∑: F ‚ü∂ G) (Œµ : G ‚ü∂ H) : (Œ∑ ‚â´ Œµ).1 = Œ∑.1 ‚â´ Œµ.1 := rfl
@[simp] def toFiberIso {P : fibration B} {X Y : P[I]} (f : X.1 ‚âÖ Y.1) (isVert : isVertical f.hom) : X ‚âÖ Y where
  hom := (‚ü® f.hom , isVert‚ü©)
  inv := by
    use f.inv ; unfold isVertical; unfold isVertical at isVert ;
    rw [‚Üê Functor.mapIso_hom P.1.hom f] at isVert ;
    exact ((Iso.eq_inv_comp (P.1.hom.mapIso f)).2 isVert).symm
  hom_inv_id := ( by apply Subtype.ext ; exact f.hom_inv_id )
  inv_hom_id := ( by apply Subtype.ext ; exact f.inv_hom_id )






lemma weird  {B : Cat} {X Y : B} {f : X ‚ü∂ Y}: (map f).obj (mk (ùüô X)) = mk f := by  unfold map ; unfold Comma.mapRight ;  aesop_cat
lemma E_functor_map_comp  {X' Y' Z' : (Sp.obj P).1.1.left} (g : Z' ‚ü∂Y') (f : Y' ‚ü∂ X') : E_functor_map (g ‚â´ f) = E_functor_map g ‚â´ E_functor_map f := by

    let X:= X'.unop.2.unop
    let Y:= Y'.unop.2.unop
    let Z := Z'.unop.2.unop

    let Œ≤:= fiberMap g

    let Œ± := fiberMap f
    rw [E_functor_map ]
    let v := g.unop.1.unop
    let u := f.unop.1.unop
    let v' : mk (v ‚â´ u) ‚ü∂ mk u := homMk v
    let v'' :  mk v ‚ü∂ mk (ùüô _ ) := homMk v
    have hv' : v' = (Over.map u).map v'' ‚â´ eqToHom (someOverExt) := by

      apply OverMorphism.ext
      simp
      let m := g.unop.base.unop
      symm
      calc
        m ‚â´ (eqToHom someOverExt).left
          = m ‚â´ (Over.forget _).map (eqToHom someOverExt) := rfl
        _ = m ‚â´ eqToHom rfl := by rw [eqToHom_map] ;
        _ = m  ‚â´ ùüô _ := by rw [eqToHom_refl]
        _ = m := by apply Category.comp_id


    let u' : mk u ‚ü∂ mk (ùüô _ ) := homMk u
    let vu : mk (v ‚â´ u) ‚ü∂mk (ùüô _ ) := homMk (v ‚â´ u)
    let restFunctor := (((PSh_rest fundamentalFibration).obj (yo.obj P)))
    let a' := f.unop.2.unop
    have : ((restFunctor.map ‚ü® v ‚ü© ).map a').1 = ((CategoryTheory.whiskerLeft (fundamentalFibration.map v).1.1 a'.1) ) := by rfl ;
    let b' := g.unop.2.unop



    let a : Y.1.left ‚ü∂ ((restFunctor.map ‚ü® u ‚ü© ).obj X).1.left := a'.1
    let Œ±2 : Y.1.left.obj (mk v) ‚ü∂X.1.left.obj (mk (v ‚â´  u))  := a.app (mk v)



    let h := g ‚â´ f
    let b : Z.1.left ‚ü∂ ((restFunctor.map ‚ü® v ‚ü© ).obj Y).1.left := g.unop.2.unop.1
    let ab : Z.1.left ‚ü∂ ((restFunctor.map ‚ü® v ‚â´ u ‚ü© ).obj X).1.left := h.unop.2.unop.1
    have ee' := (symm ( restFunctor.map_comp ‚ü®u‚ü© ‚ü®v‚ü©))
    let compPath := congrArg (fun F ‚Ü¶ (F.obj X).1.left ) ee'
    have mh : (map g.unop.base.unop).obj (mk (ùüô Z'.unop.base.unop)) = mk g.unop.base.unop := by apply weird
    have ee :(((((restFunctor.map ‚ü® u ‚ü©  ‚â´ restFunctor.map ‚ü® v ‚ü© ).obj X).1).left) ).obj
            (mk (ùüô Z'.unop.base.unop)) =
          (X'.unop.fiber.unop.1).left.obj (mk h.unop.base.unop) :=(Functor.congr_obj compPath (mk (ùüô _))).trans (replaceTargetOfFiberMap h)
    have eee : ((fundamentalFibration.op.map ‚ü® u ‚ü© ).unop.1).left.obj ((map g.unop.base.unop).obj (mk (ùüô Z'.unop.base.unop))) =
        mk h.unop.base.unop := by rw [mh] ; rfl

    have complicated : ((restFunctor.map ‚ü® v ‚ü© ).map a').1.app (mk (ùüô _)) ‚â´ eqToHom ee = eqToHom (replaceTargetOfFiberMap g) ‚â´ Œ±2 := by
        rw [this]


        calc
          _ = a.app ((map v).obj (mk (ùüô Z'.unop.base.unop)) ) ‚â´ X.1.left.map (eqToHom eee) := by apply (_‚â´=¬∑ ) ; symm ; apply eqToHom_map
          _ = a.app ((map v).obj (mk (ùüô Z'.unop.base.unop)) ) ‚â´ ((restFunctor.map ‚ü® u ‚ü© ).obj X).1.left.map (eqToHom mh) := by apply (_‚â´=¬∑ ) ; rw [eqToHom_map,eqToHom_map]
          _ =  Y.1.left.map (eqToHom mh) ‚â´ a.app  (mk v ) := by symm ; rw [‚Üê a.2] ;
          _ = _ := by apply (¬∑=‚â´_) ; apply eqToHom_map




    let vf : ((restFunctor.map ‚ü® v ‚ü© ).obj Y).1.left ‚ü∂
      (((restFunctor.map ‚ü® v ‚â´ u ‚ü© ).obj X)).1.left :=
      ((restFunctor.map ‚ü® v ‚ü© ).map a').1 ‚â´ eqToHom compPath



    have wow : ab = b ‚â´vf := by calc
      ab = (g ‚â´f).unop.fiber.unop.1 := rfl
      _ = (b' ‚â´  ((restFunctor.map ‚ü® v ‚ü© ).map a') ‚â´ eqToHom compInFiberCrypticPath ).1 := congrArg (fun x ‚Ü¶ x.1) (compInFiber f g)
      _ = b'.1 ‚â´ ((restFunctor.map ‚ü® v ‚ü© ).map a').1 ‚â´ eqToHom compPath := by
        rw [compCartTransExt , compCartTransExt]
        apply (whisker_eq _)
        apply (whisker_eq _)


        calc (eqToHom (compInFiberCrypticPath (P:=restFunctor))).1 = forgetFibration.map (eqToHom (compInFiberCrypticPath (P:=restFunctor))) := rfl
        _ = eqToHom compPath := by rw [eqToHom_map]

    have fiberMapComp : fiberMap (g ‚â´f )  =  Œ≤‚â´ Œ±2 := by
      calc
         fiberMap h = ab.app (mk (ùüô _)) ‚â´ eqToHom (replaceTargetOfFiberMap h) := rfl
         _ = ((b.app (mk (ùüô _))) ‚â´ vf.app (mk (ùüô _))) ‚â´ eqToHom (replaceTargetOfFiberMap h) := by apply eq_whisker _ ; rw [wow] ; rfl
         _ = b.app (mk (ùüô _)) ‚â´ vf.app (mk (ùüô _)) ‚â´ eqToHom (replaceTargetOfFiberMap h) := Category.assoc _ _ _
         _ = b.app (mk (ùüô _)) ‚â´ (((restFunctor.map ‚ü® v ‚ü© ).map a').1.app (mk (ùüô _)) ‚â´ (eqToHom compPath).app (mk (ùüô _) )) ‚â´ eqToHom (replaceTargetOfFiberMap h) := by rfl
         _ = b.app (mk (ùüô _)) ‚â´ ((restFunctor.map ‚ü® v ‚ü© ).map a').1.app (mk (ùüô _)) ‚â´ eqToHom (Functor.congr_obj compPath (mk (ùüô _))) ‚â´ eqToHom (replaceTargetOfFiberMap h) := (whisker_eq _ (by rw [eqToHom_app, Category.assoc]))
         _ = b.app (mk (ùüô _)) ‚â´ eqToHom (replaceTargetOfFiberMap g) ‚â´ Œ±2 := by
                                          apply ((b.app (mk (ùüô _))) ‚â´= ¬∑);
                                          --rw [‚Üê Category.assoc] ;
                                          rw [eqToHom_trans]
                                          exact complicated
         _ = Œ≤ ‚â´ Œ±2 :=  by rw [‚ÜêCategory.assoc ] ; apply eq_whisker _ ; rfl



    have myNat : Y.1.left.map v''  ‚â´ Œ± = Œ±2  ‚â´ X.1.left.map v'
      := by


        have goal : Y.1.left.map v'' ‚â´ a.app (mk (ùüô _)) = Œ±2 ‚â´ ((restFunctor.map ‚ü® u ‚ü© ).obj _).1.left.map v''  := a.naturality v''
        have this : Œ± = a.app (mk (ùüô _ )) ‚â´ eqToHom (replaceTargetOfFiberMap f) := rfl
        rw [this , ‚Üê Category.assoc , goal, Category.assoc]
        apply whisker_eq Œ±2
        have goal : ((restFunctor.map ‚ü® u ‚ü© ).obj _).1.left.map v'' ‚â´ eqToHom (replaceTargetOfFiberMap f) = X.1.left.map v' := by
          rw [hv', Functor.map_comp]
          apply whisker_eq (((restFunctor.map ‚ü® u ‚ü© ).obj _).1.left.map v'')
          symm
          apply eqToHom_map


        exact goal
    have helper : vu = v'  ‚â´ u'  := rfl


    have xhelper : X.1.left.map vu = X.1.left.map v' ‚â´ X.1.left.map u' := by rw [‚Üê Functor.map_comp , congrArg X.1.left.map helper]
    have t : (homMk ((g ‚â´ f).unop.base.unop) : mk (v ‚â´ u) ‚ü∂mk (ùüô _ ))  = vu := rfl
    rw [fiberMapComp , t,  xhelper , ‚Üê exchangeLaw, ‚Üê myNat , exchangeLaw]
    simp


def E_functor : (Sp.obj P).1.1.left ‚•§ P.1.left where
  obj := fun X ‚Ü¶ ((E'_obj).obj X.unop.fiber.unop).1
  map :=  E_functor_map

  map_comp := E_functor_map_comp
  map_id := fun X ‚Ü¶ by
    simp only [Functor.id_obj, Functor.const_obj_obj, fundamentalFibration_obj,
      fundamentalFibrationObj, E'_obj_obj_coe, E_functor_map, Functor.op_obj, Opposite.unop_op,
      domainOver_left, fiberMap, Functor.comp_obj, opFunctor_obj, Functor.comp_map, opFunctor_map,
      domainOver_right, domainOver_hom, isVertical, forget_obj, Category.assoc]
    have : ((homMk (ùüô X).unop.base.unop) : Over.mk (ùüô _) ‚ü∂ Over.mk (ùüô _)) = ùüô _ := by rfl
    rw [this]



    let iX : Grothendieck.Hom X.unop X.unop := ùüô X.unop
    have p : ((psh.obj P ‚ãô opFunctor).map iX.base).obj X.unop.fiber = X.unop.fiber := by
      simp ; rw [((_) : iX.base = ùüô _)] ; swap ; rfl ; rw [Functor.map_id] ; aesop
    have : (ùüô X).unop.fiber = eqToHom p  := by rfl
    have : (ùüô X).unop.fiber.unop.1 = eqToHom (by simp ; rw [((_) : (ùüô X).unop.base = ùüô _)] ; swap ; rfl ; rw [Functor.map_id] ; aesop) := by
      rw [this]
      rw [eqToHom_unop]

      apply eqToHom_map forgetFibration

    calc
    _ = _ ‚â´ replaceTargetOfFiberMap' (ùüô X) ‚â´ ùüô _ := by apply (_‚â´=¬∑ ) ; apply (_‚â´=¬∑) ; apply Functor.map_id
    _ = ((ùüô X).unop.fiber.unop.1).app (mk (ùüô X.unop.base.unop)) ‚â´ replaceTargetOfFiberMap' (ùüô X) := by rw [Category.comp_id]
    _ = eqToHom (by symm ; exact replaceTargetOfFiberMap (ùüô X)) ‚â´ replaceTargetOfFiberMap' (ùüô X) := by apply (¬∑ =‚â´_) ; rw [this,eqToHom_app]
    _ = _ := by unfold replaceTargetOfFiberMap' ; rw [eqToHom_trans,eqToHom_refl]





lemma E_functor_IsOverB :  E_functor ‚ãô P.1.hom = (Sp.obj P).1.1.hom  := by
  apply Functor.ext ; swap
  ¬∑ intro X ; simp ; exact ((E'_obj).obj X.unop.fiber.unop).2
  ¬∑ intro X Y f ; simp ;
    trans P.1.hom.map (E_functor_map f )
    ¬∑ rfl
    ¬∑ unfold E_functor_map
      rw [Functor.map_comp,rwFuncComp'',fiberMapVertical,‚Üê Category.assoc , eqToHom_trans]
      let u := f.unop.base.unop

      have : ((fundamentalFibration.op.obj Y.unop.base).unop.1).hom.map (homMk u : (mk u ‚ü∂ mk (ùüô _))) = u := by rfl
      rw [this]
      have : ((Sp.obj P).P.1).hom.map f = u := by rfl
      rw [this]

      -- have helper : (‚ÜëP).hom.map ((‚ÜëY.unop.fiber.unop).left.map (homMk f.unop.base.unop))




lemma anyPathIsAutomaticallyVertical {P : fibration B} {I : B} {X : P[I]} {Y : P.1.left} (p : X.1 = Y)  :
  isVertical (eqToHom p : X.1 ‚ü∂ (‚ü® Y , (congrArg (P.1.hom.obj) (symm p)).trans X.2‚ü© : obj_over I).1) := by aesop_cat
def E (P : fibration B) : Sp.obj P ‚•§c P := by
  use Over.homMk E_functor E_functor_IsOverB
  intro Y' X' œÜ hœÜ
  let ‚ü® ‚ü® I ‚ü© , ‚ü® X ‚ü© ‚ü© := X'
  let X : fundamentalFibration.obj I ‚ü∂ P := by unfold psh at X ; exact X
  obtain ‚ü® ‚ü® J ‚ü© , ‚ü® Y ‚ü© ‚ü© := Y'

  let Y : fundamentalFibration.obj J ‚ü∂ P := by unfold psh at Y ; exact Y
  have œÜIsIsoOnFibers := cartMorphsAreIsosOnFiber hœÜ
  --have this : E_functor_map œÜ = fiberMap œÜ ‚â´ X.unop.2.unop.1.left.map (Over.homMk œÜ.unop.1.unop) := rfl

  apply compCartesianMorphisms
  ¬∑
    --have eq : fiberMap œÜ = œÜ.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' œÜ := by rfl -- f.1.app (mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' œÜ := by rfl
    --rw [eq]
    have iso1 := cartMorphsAreIsosOnFiber hœÜ
    have iso1 : IsIso œÜ.unop.fiber.unop.1 := forgetFibration.map_isIso œÜ.unop.fiber.unop

    have iso1 : IsIso (œÜ.unop.fiber.unop.1.app (Over.mk (ùüô _))) := NatIso.isIso_app_of_isIso œÜ.unop.fiber.unop.1 _
    have iso2 : IsIso (replaceTargetOfFiberMap' œÜ):= instIsIsoEqToHom (replaceTargetOfFiberMap œÜ)

    have isoComp : IsIso (œÜ.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' œÜ) := IsIso.comp_isIso  ;
    let uX := (((yoObj P).map (fundamentalFibration.map (œÜ.unop.1.unop)).op).obj X)
    let t : ((Y / J).obj (‚ü® mk (ùüô _) ,rfl‚ü© )).1 ‚ü∂ ((uX / J).obj (‚ü® mk (ùüô _) ,rfl‚ü© )).1 := rewrittenTrafo œÜ.unop.fiber.unop.1 ‚ü® Over.mk (ùüô _) , rfl‚ü©
    have tIsVerti : isVertical (X:= (Y / J).obj (‚ü® mk (ùüô _) ,rfl‚ü© )) t  := by apply  œÜ.unop.fiber.unop.2 -- rewrittenTrafo (B:=B) (œÜ.unop.fiber.unop.1) ‚ü® Over.mk (ùüô _) , rfl‚ü©
    have rew : œÜ.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' œÜ = t ‚â´ eqToHom (replaceTargetOfFiberMap œÜ) := by apply (¬∑ =‚â´_) ; symm ; rfl

    let iso : (Y / J).obj (‚ü® mk (ùüô _) ,rfl‚ü© ) ‚âÖ  (X / J).obj ‚ü® mk œÜ.unop.base.unop , rfl ‚ü©  := by
      apply toFiberIso ; swap
      ¬∑ exact asIso (œÜ.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' œÜ)
      ¬∑ rw [asIso_hom]
        rw [rew]
        exact compPresVertical t (eqToHom (_)) tIsVerti (anyPathIsAutomaticallyVertical  (_))



    have this :iso.hom.1 = fiberMap œÜ := by rfl
    rw [‚Üê this]
    apply verticalIsosAreCart (P:=P)



  ¬∑ apply  X.2
    apply automaticallyCart -- (Over.homMk œÜ.unop.base.unop)
    --have test : isCartesianMorphism fib.1 morph :=automaticallyCart isDisc motph
    --exact test

variable {P : fibration  B} {I : B} {X Y : ((psh.obj P).obj (Opposite.op I)).1}
def TriangleOnFibersCommutesObj (X : ((psh.obj P).obj (Opposite.op I)).1) :  (fiberComparisonFunctor (psh.obj P) (Opposite.op I) ‚ãô
  toFunctorOnFibers (E P) I).obj X =  E'_obj.obj X := by
    simp ; apply Subtype.ext ; aesop ;
def fcF := fiberComparisonFunctor (psh.obj P) (Opposite.op I)
def myFiberMapFiberUnop  (f : X ‚ü∂ Y) : ((fcF.obj X).1).unop.fiber.unop ‚ü∂  (((psh.obj P ‚ãô opFunctor).map (ùüô (Opposite.op I))).obj ((fcF.obj Y).1).unop.fiber).unop := fiberComparisonFunctor_map_fib f
def myFiberMapFiber  (f : X ‚ü∂ Y) : ((psh.obj P ‚ãô opFunctor).map (ùüô (Opposite.op I))).obj ((fcF.obj Y).1).unop.fiber ‚ü∂ ((fcF.obj X).1).unop.fiber := Opposite.op <| myFiberMapFiberUnop f
def myFiberMap (f : X ‚ü∂ Y) : (fcF.obj X) ‚ü∂ (fcF.obj Y) :=  ‚ü® ‚ü® ùüô (Opposite.op I) , myFiberMapFiber f‚ü© , by aesop‚ü©
lemma helpPath : (((psh.obj P ‚ãô opFunctor).map (ùüô (Opposite.op I))).obj ((fcF.obj Y).1).unop.fiber).unop = Y :=  by rw [Functor.map_id] ;rfl
lemma helpLemma3 (f : X ‚ü∂ Y): myFiberMapFiberUnop f ‚â´ eqToHom (helpPath) = f := by
        calc
        _ = (f ‚â´ eqToHom (_)) ‚â´ eqToHom (helpPath) := by apply (¬∑ =‚â´_) ; rfl
        _ = f ‚â´ eqToHom (_) := by rw [Category.assoc, eqToHom_trans]
        _ = f ‚â´ ùüô _  := by apply (_‚â´=¬∑) ; rw [eqToHom_refl]
        _ = _ := by rw [Category.comp_id]


lemma firstPartOfProof (f : X ‚ü∂ Y) : ((myFiberMap f).1.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' ((myFiberMap f).1)) ‚â´ Y.1.left.map (Over.homMk (ùüô _))
        = eqToHom (congrArg FiberToTotalSpace.obj (TriangleOnFibersCommutesObj X)) ‚â´  rewrittenTrafo f.1 ‚ü® Over.mk (ùüô I ) , rfl ‚ü© ‚â´ eqToHom (congrArg FiberToTotalSpace.obj (symm (TriangleOnFibersCommutesObj Y)))  := by
        have helpLemma3' : ‚àÄ u , (myFiberMapFiberUnop f).1.app u ‚â´ eqToHom (_) = f.1.app u := fun u ‚Ü¶ by symm ;  calc
          f.1.app u =  ((myFiberMapFiberUnop f) ‚â´ eqToHom helpPath).1.app u := by rw [helpLemma3 f]
          _ = (forgetFibration.map ((myFiberMapFiberUnop f) ‚â´ eqToHom helpPath)).app u := by rfl
          _ = (forgetFibration.map ((myFiberMapFiberUnop f)) ‚â´ forgetFibration.map (eqToHom helpPath)).app u := by rw [Functor.map_comp]
          _ = (forgetFibration.map ((myFiberMapFiberUnop f))).app u ‚â´ (forgetFibration.map (eqToHom helpPath)).app u := by rfl
          _ = (myFiberMapFiberUnop f).1.app u ‚â´ eqToHom (_) := by apply (_‚â´=¬∑ ) ; rw [eqToHom_map forgetFibration] ; apply eqToHom_app
        have obs: eqToHom (congrArg FiberToTotalSpace.obj (TriangleOnFibersCommutesObj X)) = ùüô _ := by apply eqToHom_refl
        have test : rewrittenTrafo f.1 ‚ü® Over.mk (ùüô I ) , rfl ‚ü© = f.1.app (Over.mk (ùüô _)) := by aesop
        have test2 : (myFiberMap f).1.unop.fiber.unop.1.app (Over.mk (ùüô _)) = (myFiberMapFiber f).unop.1.app (Over.mk (ùüô _))  := by rfl
        calc
        _ = ((myFiberMapFiber f).unop.1.app (Over.mk (ùüô _)) ‚â´ eqToHom ( replaceTargetOfFiberMap ((myFiberMap f).1))) ‚â´ Y.1.left.map (ùüô _) := eq_whisker_eq (test2 =‚â´ _) (congrArg Y.1.left.map (by rfl))
        _ = ((myFiberMapFiber f).unop.1.app (Over.mk (ùüô _)) ‚â´ eqToHom ( replaceTargetOfFiberMap ((myFiberMap f).1))) ‚â´ (ùüô _) := by apply (_‚â´=¬∑ ) ; apply Functor.map_id
        _ = (myFiberMapFiber f).unop.1.app (Over.mk (ùüô _)) ‚â´ eqToHom ( replaceTargetOfFiberMap ((myFiberMap f).1)) := by apply Category.comp_id
        _ = (myFiberMapFiberUnop f).1.app (Over.mk (ùüô _)) ‚â´ eqToHom ( replaceTargetOfFiberMap ((myFiberMap f).1)) := by apply (¬∑ =‚â´_) ; rfl
        _ = ((myFiberMapFiberUnop f).1.app (Over.mk (ùüô _)) ‚â´ eqToHom (_) )‚â´ eqToHom (congrArg FiberToTotalSpace.obj (symm (TriangleOnFibersCommutesObj Y))) := by symm ; rw [Category.assoc] ; apply (_‚â´=¬∑) ; rw [eqToHom_trans] ; rw [Functor.map_id] ; aesop_cat
        _ = f.1.app (Over.mk (ùüô _)) ‚â´ eqToHom (congrArg FiberToTotalSpace.obj (symm (TriangleOnFibersCommutesObj Y))) := by apply (¬∑ =‚â´_) ; exact helpLemma3' (Over.mk (ùüô _))
        _ = eqToHom (congrArg FiberToTotalSpace.obj (TriangleOnFibersCommutesObj X)) ‚â´ f.1.app (Over.mk (ùüô _)) ‚â´ eqToHom (congrArg FiberToTotalSpace.obj (symm (TriangleOnFibersCommutesObj Y))) := by symm ; rw [obs , Category.id_comp ]
        _= _ := by apply (_‚â´=¬∑ ) ; apply (¬∑=‚â´_) ; exact (test.symm)

theorem TriangleOnFibersCommutes  :
  fiberComparisonFunctor (psh.obj P) (Opposite.op I) ‚ãô
  toFunctorOnFibers (E P) I =
  E'_obj (P:=P) (I:=I) := by
-- (F:= fiberComparisonFunctor (psh.obj P) (Opposite.op I) ‚ãô (toFunctorOnFibers (E P) I))
    apply Functor.ext   ; swap
    ¬∑ intro X; exact TriangleOnFibersCommutesObj X
    ¬∑ intro X Y f ; apply Subtype.ext ;
      have goal : (fcF.map f).1 = ‚ü® ùüô (Opposite.op I) , Opposite.op (fiberComparisonFunctor_map_fib f)‚ü© := by apply fiberComparisonFunctor_map_coe
      calc
      ((fcF ‚ãô (E P / I)).map f).1
        = ((E P / I).map (fcF.map f)).1  := by rw [Functor.comp_map]
      _ = ((E P / I).map (fcF.map f)).1   := by rfl
       _ = (E P).1.left.map (fcF.map f).1 := by rfl
       _ = E_functor_map (fcF.map f).1 := by rfl
       _ = E_functor_map (myFiberMap f).1 := by apply congrArg E_functor_map ; exact (goal.symm)
       _ = fiberMap ((myFiberMap f).1) ‚â´ Y.1.left.map (Over.homMk (ùüô _)) := by unfold E_functor_map ; rfl --; apply (_ ‚â´= ¬∑) ; rw [Functor.map_id] , ùüô
       _ = ((myFiberMap f).1.unop.fiber.unop.1.app (Over.mk (ùüô _)) ‚â´ replaceTargetOfFiberMap' ((myFiberMap f).1)) ‚â´ Y.1.left.map (Over.homMk (ùüô _)) := by rfl
       _ = eqToHom (congrArg FiberToTotalSpace.obj (TriangleOnFibersCommutesObj X)) ‚â´  rewrittenTrafo f.1 ‚ü® Over.mk (ùüô I ) , rfl ‚ü© ‚â´ eqToHom (congrArg FiberToTotalSpace.obj (symm (TriangleOnFibersCommutesObj Y)))  := firstPartOfProof f
      _ = FiberToTotalSpace.map (eqToHom (TriangleOnFibersCommutesObj X)) ‚â´  FiberToTotalSpace.map (E'_obj.map f) ‚â´ FiberToTotalSpace.map (eqToHom (symm (TriangleOnFibersCommutesObj Y)))  := by rw [‚Üê eqToHom_map FiberToTotalSpace] ; apply (_‚â´=¬∑ ) ; apply (eq_whisker_eq) ; rfl ; symm ; apply eqToHom_map FiberToTotalSpace
      _ = FiberToTotalSpace.map (eqToHom (TriangleOnFibersCommutesObj X) ‚â´  E'_obj.map f ‚â´ eqToHom (symm (TriangleOnFibersCommutesObj Y))) := by symm ; rw [Functor.map_comp , Functor.map_comp]

theorem EisEquiv {P : fibration B} : isEquivalenceInBicategory (E P) := by
  apply equivalenceOfFibrationsCheckOnFibers ;
  intro I ;
  let X :=  psh.obj P
  apply IsEquivalence.cancelCompLeft (fiberComparisonFunctor X (Opposite.op I)) _
  ¬∑ exact fiberComparisonIsEquivalence
  ¬∑ rw [TriangleOnFibersCommutes] ; exact equivOnFibers
-/
